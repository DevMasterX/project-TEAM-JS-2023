{"mappings":"I,E,E,E,E,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,O,E,E,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,Q,S,C,C,C,E,G,E","sources":["<anon>","src/js/rating.js"],"sourcesContent":["(function () {\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\nparcelRequire.register(\"lxY1m\", function(module, exports) {\n// const ratings = document.querySelectorAll('.rating');\n// if (ratings.length > 0) {\n//     initRatings();\n// }\n// //основная функция\n// function initRatings() {\n//     let ratingActive, ratingValue;\n// }\n//     //бегаем по всем рейтингам\n//     for (let index = 0; index < ratings.length; index++){\n//         const rating = ratings[index];\n//         initRating(rating);\n//     }\n//     //инициализируем конкретный рейтинг\n//     function initRating(rating){\n//         initRatingVars(rating);\n//         setRatingActiveWidth();\n//         if(rating.classList.conteins('rating_set')) {\n//             setRating(rating);\n//         }\n//     }\n//     //инициализация переменных\n//     function initRatingVars(rating) {\n//         ratingActive = rating.querySelector('.rating_active');\n//         ratingValue = rating.querySelector('.rating_value');\n//     }\n//     //изминяем ширину активных звезд\n//     function setRatingActiveWidth(index = ratingValue.innerHTML) {\n//         const ratingActiveWidth = index / 0.05;\n//         ratingActive.style.width = `${ratingActiveWidth}%`;\n//     }\n//     //возможность указать оценку\n//     function setRating(rating) {\n//         const ratingItems = rating.querySelectorAll('.rating_item');\n//         for (let index = 0; index < ratingItems.length; index++) {\n//             const ratingItem = ratingItems[index];\n//             ratingItem.addEventListener(\"mouseeenter\", function (e) {\n//             //обновление переменных\n//             initRatingVars(rating);\n//             //обновление активных звезд\n//             setRatingActiveWidth(ratingItem.value);\n//         });\n//         ratingItem.addEventListener(\"mouseleve\", function(e) {\n//             //обновление активных звезд\n//             setRatingActiveWidth();\n//         });\n//         ratingItem.addEventListener(\"clck\", function (e) {\n//             //обновление переменных\n//             initRatingVars(rating);\n//             if (rating.dataset.ajax) {\n//                 //отправить на сервер\n//                 setRatingVelue(ratingItem.value, rating);\n//              } else {\n//                 //отобразить указаную оценку\n//                 ratingValue.innerHTML = index + 1;\n//                 setRatingActiveWidth();\n//              }\n//         });\n//         async function setRatingVelue(value, rating) {\n//             if (!rating.classList.conteins('rating_sending')) {\n//                 rating/classList.add('rating_sending');\n//                 //отправка данных (value) на сервер\n//                 let respons = await fatch('rating.json',{\n//                     method: 'GET',\n//                     // body: JSON.stringify({\n//                     //     userRating: value\n//                     // }),\n//                     // headers: {\n//                     //     'content-type': 'appLication/json'\n//                     // }\n//                 });\n//                 if (Response.ok) {\n//                     const result = await response.json();\n//                     //получаем новый рейтинг\n//                     const newRating = result.newRating;\n//                     //вывод нового среднего результата\n//                     ratingValue.innerHTML = newRating;\n//                     //щбрщвление активных звезд\n//                     setRatingActiveWidth();\n//                     rating.classList.remove('rating_sending');\n//                 } else {\n//                     alert(Error);\n//                     rating.classList.remove('rating_sending');\n//                 }\n//             }\n//         }\n//     }\n// };\n// // get push set\n// // на бекенді отримати та змінити рейтинг\n// // взяти клас кнопки  при кліку відкривати мою модалку(сlass=\"rating-btn\")\n// // по кліку відправляются данні в бекенді//\n// import axios from 'axios';\n// import Notiflix from 'notiflix';\n// import {recipeID} from './pagination'\n// const BASE_URL = 'https://tasty-treats-backend.p.goit.global/api/recipes/';\n// const refs = {\n//     ratingModal: document.querySelector(`.backdrop__rating`),\n//     openRatingModal: document.querySelector(`.pop-up-btn-rating`),\n//     closeRatingModal: document.querySelector(`.close__rating__btn`),\n//     ratingForm: document.querySelector(`.rating__form`),\n//     ratingRadio: document.querySelectorAll(`.rating__radio`),\n//     body: document.querySelector(`body`),\n// };\n// refs.closeRatingModal.addEventListener(`click`, closeRatingModal);\n// refs.ratingForm.addEventListener(`submit`, submitRating);\n// refs.openRatingModal.addEventListener(`click`, openRatingModal);\n// refs.ratingModal.addEventListener('click', onBackdropClick);\n// function onBackdropClick(event) {\n//     if (event.target === event.currentTarget) {\n//         closeRatingModal();\n//     }\n// }\n// function closeRatingModal() {\n//     refs.ratingModal.classList.add(`is-hidden`);\n//     refs.body.classList.remove('scroll-blocked');\n// }\n// function openRatingModal() {\n//     const value = document.querySelector(`.set__rating > .rating__value`);\n//     refs.ratingRadio.forEach(radio => {\n//         radio.checked = false;\n//     });\n//     refs.ratingForm.reset();\n//     value.innerHTML = `0.0`;\n//     initRatings();\n//     refs.ratingModal.classList.remove(`is-hidden`);\n//     refs.body.classList.add('scroll-blocked');\n// }\n// export function initRatings() {\n//     // Знаходимо всі рейтинги\n//     const ratings = document.querySelectorAll(`.rating`);\n//     let ratingValue, ratingStars;\n//     ratings.forEach(rating => {\n//         initRating(rating);\n//     });\n//     // Ініціалізуємо кожен рейтинг, якщо рейтинг на картці, то рендеримо зірки\n//     function initRating(rating) {\n//         if (\n//             (rating.classList.contains(`card__rating`) ||\n//                 rating.classList.contains(`popup__rating`)) &&\n//             rating.lastElementChild.classList.contains(`rating__value`)\n//         ) {\n//             renderIcons(rating);\n//         }\n//         // Ініціалізуємо змінні для роботи і зафарбовуємо зіки залежно від значення рейтингу\n//         initRatingValues(rating);\n//         setActiveStars();\n//         // Ініціалізуємо вибір рейтингу, якщо він в модальному вікні\n//         if (rating.classList.contains(`set__rating`)) {\n//             rating.addEventListener(`change`, setNewValue);\n//         }\n//     }\n//     function initRatingValues(rating) {\n//         ratingValue = rating.querySelector(`.rating__value`);\n//         ratingStars = rating.querySelectorAll(`.rating__icon`);\n//     }\n//     function setActiveStars(count = Math.floor(ratingValue.innerHTML)) {\n//         ratingStars.forEach(star => {\n//             star.classList.remove(`active__star`);\n//         });\n//         for (let i = 0; i < count; i++) {\n//             const star = ratingStars[i];\n//             star.classList.add(`active__star`);\n//         }\n//     }\n//     function setNewValue(e) {\n//         ratingValue.innerHTML = `${e.target.value}.0`;\n//         setActiveStars();\n//     }\n//     // Єдиний робочий варіант рендеру SVG з JS який мені вдалось знайти\n//     function renderIcons(rating) {\n//         const starWrap = document.createElement(`div`);\n//         for (let i = 0; i < 5; i++) {\n//             const starSvg = document.createElementNS(\n//                 'http://www.w3.org/2000/svg',\n//                 'svg'\n//             );\n//             const starPath = document.createElementNS(\n//                 'http://www.w3.org/2000/svg',\n//                 'path'\n//             );\n//             starWrap.classList.add(`card__star__wrap`);\n//             starSvg.setAttribute('viewBox', '0 0 32 32');\n//             starSvg.setAttribute('width', '18');\n//             starSvg.setAttribute('height', '18');\n//             starSvg.classList.add('rating__icon');\n//             starPath.setAttribute(\n//                 'd',\n//                 'M13.826 3.262c0.684-2.106 3.663-2.106 4.348 0l1.932 5.945c0.306 0.942 1.184 1.579 2.174 1.579h6.251c2.214 0 3.135 2.833 1.344 4.135l-5.057 3.674c-0.801 0.582-1.136 1.614-0.83 2.556l1.931 5.945c0.684 2.106-1.726 3.857-3.517 2.555l-5.057-3.674c-0.801-0.582-1.886-0.582-2.687 0l-5.057 3.674c-1.791 1.302-4.202-0.45-3.517-2.555l1.932-5.945c0.306-0.942-0.029-1.973-0.83-2.556l-5.057-3.674c-1.791-1.302-0.871-4.135 1.344-4.135h6.251c0.99 0 1.868-0.638 2.174-1.579l1.932-5.945z'\n//             );\n//             starSvg.appendChild(starPath);\n//             starWrap.append(starSvg);\n//         }\n//         rating.append(starWrap);\n//     }\n// }\n// // Відправка рейтингу на бек(проблема в тому, що якщо в email є '.' то бек не прийме його)\n// async function submitRating(e) {\n//     e.preventDefault();\n//     const { rating, email } = e.currentTarget;\n//     const inputValues = {\n//         rate: Number(rating.value),\n//         email: email.value,\n//     };\n//     if (inputValues.rate === 0) {\n//         Notiflix.Report.warning(`Oops`, `Need to select some rating`, `Return`);\n//         return;\n//     }\n//     if (inputValues.email.trim() === '') {\n//         Notiflix.Report.warning(`Oops`, `Need to enter email`, `Return`);\n//         return;\n//     }\n//     await axios\n//         .patch(`${BASE_URL}${recipeID}/rating`, inputValues)\n//         .then(response => {\n//             Notiflix.Report.success(\n//                 `Great`,\n//                 `Completly added rating for ${response.data.title}`,\n//                 `Return`\n//             );\n//             closeRatingModal();\n//         })\n//         .catch(error => {\n//             Notiflix.Notify.failure(`${error.response.data.message}`);\n//         });\n// }\n\n});\n\n\nparcelRequire(\"lxY1m\");\n})();\n//# sourceMappingURL=index.e4a0eb2e.js.map\n","// const ratings = document.querySelectorAll('.rating');\n// if (ratings.length > 0) {\n//     initRatings();\n// }\n// //основная функция\n// function initRatings() {\n//     let ratingActive, ratingValue;\n// }\n//     //бегаем по всем рейтингам\n//     for (let index = 0; index < ratings.length; index++){\n//         const rating = ratings[index];\n//         initRating(rating);\n//     }\n//     //инициализируем конкретный рейтинг\n//     function initRating(rating){\n//         initRatingVars(rating);\n\n//         setRatingActiveWidth();\n\n//         if(rating.classList.conteins('rating_set')) {\n//             setRating(rating);\n//         }\n//     }\n//     //инициализация переменных\n//     function initRatingVars(rating) {\n//         ratingActive = rating.querySelector('.rating_active');\n//         ratingValue = rating.querySelector('.rating_value');\n//     }\n//     //изминяем ширину активных звезд\n//     function setRatingActiveWidth(index = ratingValue.innerHTML) {\n//         const ratingActiveWidth = index / 0.05;\n//         ratingActive.style.width = `${ratingActiveWidth}%`;\n//     }\n//     //возможность указать оценку\n//     function setRating(rating) {\n//         const ratingItems = rating.querySelectorAll('.rating_item');\n//         for (let index = 0; index < ratingItems.length; index++) {\n//             const ratingItem = ratingItems[index];\n//             ratingItem.addEventListener(\"mouseeenter\", function (e) {\n//             //обновление переменных\n//             initRatingVars(rating);\n//             //обновление активных звезд\n//             setRatingActiveWidth(ratingItem.value);\n//         });\n//         ratingItem.addEventListener(\"mouseleve\", function(e) {\n//             //обновление активных звезд\n//             setRatingActiveWidth();\n//         });\n//         ratingItem.addEventListener(\"clck\", function (e) {\n//             //обновление переменных\n//             initRatingVars(rating);\n//             if (rating.dataset.ajax) {\n//                 //отправить на сервер\n//                 setRatingVelue(ratingItem.value, rating);\n//              } else {\n//                 //отобразить указаную оценку\n//                 ratingValue.innerHTML = index + 1;\n//                 setRatingActiveWidth();\n//              }\n//         });\n//         async function setRatingVelue(value, rating) {\n//             if (!rating.classList.conteins('rating_sending')) {\n//                 rating/classList.add('rating_sending');\n//                 //отправка данных (value) на сервер\n//                 let respons = await fatch('rating.json',{\n//                     method: 'GET',\n\n//                     // body: JSON.stringify({\n//                     //     userRating: value\n//                     // }),\n//                     // headers: {\n//                     //     'content-type': 'appLication/json'\n//                     // }\n//                 });\n//                 if (Response.ok) {\n//                     const result = await response.json();\n//                     //получаем новый рейтинг\n//                     const newRating = result.newRating;\n//                     //вывод нового среднего результата\n//                     ratingValue.innerHTML = newRating;\n//                     //щбрщвление активных звезд\n//                     setRatingActiveWidth();\n\n//                     rating.classList.remove('rating_sending');\n//                 } else {\n//                     alert(Error);\n\n//                     rating.classList.remove('rating_sending');\n//                 }\n//             }\n//         }\n//     }\n// };\n\n// // get push set\n// // на бекенді отримати та змінити рейтинг\n// // взяти клас кнопки  при кліку відкривати мою модалку(сlass=\"rating-btn\")\n// // по кліку відправляются данні в бекенді//\n\n// import axios from 'axios';\n// import Notiflix from 'notiflix';\n// import {recipeID} from './pagination'\n\n// const BASE_URL = 'https://tasty-treats-backend.p.goit.global/api/recipes/';\n\n// const refs = {\n//     ratingModal: document.querySelector(`.backdrop__rating`),\n//     openRatingModal: document.querySelector(`.pop-up-btn-rating`),\n//     closeRatingModal: document.querySelector(`.close__rating__btn`),\n//     ratingForm: document.querySelector(`.rating__form`),\n//     ratingRadio: document.querySelectorAll(`.rating__radio`),\n//     body: document.querySelector(`body`),\n// };\n\n// refs.closeRatingModal.addEventListener(`click`, closeRatingModal);\n// refs.ratingForm.addEventListener(`submit`, submitRating);\n// refs.openRatingModal.addEventListener(`click`, openRatingModal);\n// refs.ratingModal.addEventListener('click', onBackdropClick);\n\n// function onBackdropClick(event) {\n//     if (event.target === event.currentTarget) {\n//         closeRatingModal();\n//     }\n// }\n\n// function closeRatingModal() {\n//     refs.ratingModal.classList.add(`is-hidden`);\n//     refs.body.classList.remove('scroll-blocked');\n// }\n\n// function openRatingModal() {\n//     const value = document.querySelector(`.set__rating > .rating__value`);\n//     refs.ratingRadio.forEach(radio => {\n//         radio.checked = false;\n//     });\n//     refs.ratingForm.reset();\n//     value.innerHTML = `0.0`;\n//     initRatings();\n//     refs.ratingModal.classList.remove(`is-hidden`);\n//     refs.body.classList.add('scroll-blocked');\n// }\n\n// export function initRatings() {\n//     // Знаходимо всі рейтинги\n//     const ratings = document.querySelectorAll(`.rating`);\n//     let ratingValue, ratingStars;\n\n//     ratings.forEach(rating => {\n//         initRating(rating);\n//     });\n//     // Ініціалізуємо кожен рейтинг, якщо рейтинг на картці, то рендеримо зірки\n//     function initRating(rating) {\n//         if (\n//             (rating.classList.contains(`card__rating`) ||\n//                 rating.classList.contains(`popup__rating`)) &&\n//             rating.lastElementChild.classList.contains(`rating__value`)\n//         ) {\n//             renderIcons(rating);\n//         }\n//         // Ініціалізуємо змінні для роботи і зафарбовуємо зіки залежно від значення рейтингу\n//         initRatingValues(rating);\n//         setActiveStars();\n//         // Ініціалізуємо вибір рейтингу, якщо він в модальному вікні\n//         if (rating.classList.contains(`set__rating`)) {\n//             rating.addEventListener(`change`, setNewValue);\n//         }\n//     }\n\n//     function initRatingValues(rating) {\n//         ratingValue = rating.querySelector(`.rating__value`);\n//         ratingStars = rating.querySelectorAll(`.rating__icon`);\n//     }\n\n//     function setActiveStars(count = Math.floor(ratingValue.innerHTML)) {\n//         ratingStars.forEach(star => {\n//             star.classList.remove(`active__star`);\n//         });\n//         for (let i = 0; i < count; i++) {\n//             const star = ratingStars[i];\n//             star.classList.add(`active__star`);\n//         }\n//     }\n\n//     function setNewValue(e) {\n//         ratingValue.innerHTML = `${e.target.value}.0`;\n//         setActiveStars();\n//     }\n\n//     // Єдиний робочий варіант рендеру SVG з JS який мені вдалось знайти\n//     function renderIcons(rating) {\n//         const starWrap = document.createElement(`div`);\n\n//         for (let i = 0; i < 5; i++) {\n//             const starSvg = document.createElementNS(\n//                 'http://www.w3.org/2000/svg',\n//                 'svg'\n//             );\n//             const starPath = document.createElementNS(\n//                 'http://www.w3.org/2000/svg',\n//                 'path'\n//             );\n\n//             starWrap.classList.add(`card__star__wrap`);\n\n//             starSvg.setAttribute('viewBox', '0 0 32 32');\n//             starSvg.setAttribute('width', '18');\n//             starSvg.setAttribute('height', '18');\n\n//             starSvg.classList.add('rating__icon');\n\n//             starPath.setAttribute(\n//                 'd',\n//                 'M13.826 3.262c0.684-2.106 3.663-2.106 4.348 0l1.932 5.945c0.306 0.942 1.184 1.579 2.174 1.579h6.251c2.214 0 3.135 2.833 1.344 4.135l-5.057 3.674c-0.801 0.582-1.136 1.614-0.83 2.556l1.931 5.945c0.684 2.106-1.726 3.857-3.517 2.555l-5.057-3.674c-0.801-0.582-1.886-0.582-2.687 0l-5.057 3.674c-1.791 1.302-4.202-0.45-3.517-2.555l1.932-5.945c0.306-0.942-0.029-1.973-0.83-2.556l-5.057-3.674c-1.791-1.302-0.871-4.135 1.344-4.135h6.251c0.99 0 1.868-0.638 2.174-1.579l1.932-5.945z'\n//             );\n\n//             starSvg.appendChild(starPath);\n//             starWrap.append(starSvg);\n//         }\n//         rating.append(starWrap);\n//     }\n// }\n\n// // Відправка рейтингу на бек(проблема в тому, що якщо в email є '.' то бек не прийме його)\n// async function submitRating(e) {\n//     e.preventDefault();\n\n//     const { rating, email } = e.currentTarget;\n\n//     const inputValues = {\n//         rate: Number(rating.value),\n//         email: email.value,\n//     };\n//     if (inputValues.rate === 0) {\n//         Notiflix.Report.warning(`Oops`, `Need to select some rating`, `Return`);\n//         return;\n//     }\n//     if (inputValues.email.trim() === '') {\n//         Notiflix.Report.warning(`Oops`, `Need to enter email`, `Return`);\n//         return;\n//     }\n\n//     await axios\n//         .patch(`${BASE_URL}${recipeID}/rating`, inputValues)\n//         .then(response => {\n//             Notiflix.Report.success(\n//                 `Great`,\n//                 `Completly added rating for ${response.data.title}`,\n//                 `Return`\n//             );\n\n//             closeRatingModal();\n//         })\n//         .catch(error => {\n//             Notiflix.Notify.failure(`${error.response.data.message}`);\n//         });\n// }\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","self","window","global","id","exports","init","module","call","err","Error","code","register"],"version":3,"file":"index.e4a0eb2e.js.map"}